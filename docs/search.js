window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "dockinspect", "modulename": "dockinspect", "kind": "module", "doc": "<p>Command-line interface for interactive analysis and visualization of protein\u2013ligand docking results.</p>\n\n<p>This script provides a shell-based interface that allows the user to:</p>\n\n<ul>\n<li>Load a ligand from a SMILES string</li>\n<li>Load docking results from AutoDock Vina</li>\n<li>Visualize docking poses and interactions in PyMOL</li>\n<li>Display physicochemical properties of ligand and pockets</li>\n<li>Analyze hydrogen bonding and pose\u2013pocket assignments</li>\n</ul>\n\n<p>Commands:\n    ligand_info     - Show ligand properties (LogP, SASA, TPSA, Volume, Charge)\n    visualize       - Launch PyMOL with structure, pose, and selected visualization mode\n    pocket_info     - Show SASA, GRAVY, and Charge for one or all pockets\n    poses_info      - Show ligand\u2013pocket interaction summary per pose\n    exit            - Exit the shell</p>\n"}, {"fullname": "dockinspect.Session", "modulename": "dockinspect", "qualname": "Session", "kind": "class", "doc": "<p>Represents the state of a docking analysis session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>smiles</strong>:  SMILES string for the ligand.</li>\n<li><strong>pdb_code</strong>:  Protein structure PDB code.</li>\n<li><strong>vina_file</strong>:  Path to the out_vina file from AutoDock Vina.</li>\n<li><strong>structure_file</strong>:  Path to the structure file from AutoDock Vina.</li>\n<li><strong>predictions_file</strong>:  Path to the file containing predicted pockets (optional).</li>\n<li><strong>residues_file</strong>:  Path to the file mapping pockets to residues (optional).</li>\n</ul>\n"}, {"fullname": "dockinspect.Session.__init__", "modulename": "dockinspect", "qualname": "Session.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">smiles</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pdb_code</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vina_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">structure_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">residues_file</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "dockinspect.Session.ligand", "modulename": "dockinspect", "qualname": "Session.ligand", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.pdb_code", "modulename": "dockinspect", "qualname": "Session.pdb_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.out_vina_file", "modulename": "dockinspect", "qualname": "Session.out_vina_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.structure_file", "modulename": "dockinspect", "qualname": "Session.structure_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.predictions_file", "modulename": "dockinspect", "qualname": "Session.predictions_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.residues_file", "modulename": "dockinspect", "qualname": "Session.residues_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.pockets", "modulename": "dockinspect", "qualname": "Session.pockets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Session.poses", "modulename": "dockinspect", "qualname": "Session.poses", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.launch_pymol_visualization", "modulename": "dockinspect", "qualname": "launch_pymol_visualization", "kind": "function", "doc": "<p>Launches PyMOL with a visualization script for binding poses from AutoDock Vina.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdb_code</strong>:  PDB code for the protein structure to fetch remotely.</li>\n<li><strong>vina_file</strong>:  Path to the out_vina file from AutoDock Vina.</li>\n<li><strong>pose_num</strong>:  Pose number to visualize (1-based index, default is 1).</li>\n<li><strong>mode</strong>:  Visualization mode ('surface', 'polar', 'charge', 'hbonds', default is 'hbonds').</li>\n<li><strong>pocket_selection</strong>:  PyMOL atom selection string for highlighting a pocket (from p2rank predictions).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pdb_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vina_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pose_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pocket_selection</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dockinspect.Shell", "modulename": "dockinspect", "qualname": "Shell", "kind": "class", "doc": "<p>Interactive shell interface for exploring ligand\u2013protein docking results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  A Session object containing all loaded data.</li>\n</ul>\n", "bases": "cmd.Cmd"}, {"fullname": "dockinspect.Shell.__init__", "modulename": "dockinspect", "qualname": "Shell.__init__", "kind": "function", "doc": "<p>Instantiate a line-oriented interpreter framework.</p>\n\n<p>The optional argument 'completekey' is the readline name of a\ncompletion key; it defaults to the Tab key. If completekey is\nnot None and the readline module is available, command completion\nis done automatically. The optional arguments stdin and stdout\nspecify alternate input and output file objects; if not specified,\nsys.stdin and sys.stdout are used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">dockinspect</span><span class=\"o\">.</span><span class=\"n\">Session</span></span>)</span>"}, {"fullname": "dockinspect.Shell.intro", "modulename": "dockinspect", "qualname": "Shell.intro", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Type &#x27;help&#x27; or &#x27;?&#x27; to list commands.\\n&quot;"}, {"fullname": "dockinspect.Shell.prompt", "modulename": "dockinspect", "qualname": "Shell.prompt", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&gt; &#x27;"}, {"fullname": "dockinspect.Shell.session", "modulename": "dockinspect", "qualname": "Shell.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dockinspect.Shell.do_ligand_info", "modulename": "dockinspect", "qualname": "Shell.do_ligand_info", "kind": "function", "doc": "<p>Displays information about the loaded ligand.</p>\n\n<p>Usage:\n    ligand_info [--csv FILE]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>line</strong>:  Optional argument --csv FILE to export output.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dockinspect.Shell.do_visualize", "modulename": "dockinspect", "qualname": "Shell.do_visualize", "kind": "function", "doc": "<p>Launches PyMOL visualization for the selected pose and mode.</p>\n\n<p>Usage:\n    visualize [--pose NUM] [--mode MODE]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>line: Command-line string with optional arguments</strong>: \n--pose (int): Pose number to visualize (default = 1).\n--mode (str): Visualization mode, one of {'surface', 'polar', 'charge', 'hbonds'} (default = \"hbonds\").</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dockinspect.Shell.do_pocket_info", "modulename": "dockinspect", "qualname": "Shell.do_pocket_info", "kind": "function", "doc": "<p>Displays pocket properties: SASA, GRAVY and charge.</p>\n\n<p>Usage:\n    pocket_info [POCKET_ID] [--csv FILE]</p>\n\n<p>If POCKET_ID is given, shows just that one.\nIf --csv is provided, saves all pockets to file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dockinspect.Shell.do_poses_info", "modulename": "dockinspect", "qualname": "Shell.do_poses_info", "kind": "function", "doc": "<p>Displays docking pose data for all or one specific pose.</p>\n\n<p>Usage:\n    poses_info [POSE_INDEX] [--csv FILE] [--res] [--csv_hbonds FILE]</p>\n\n<p>If a pose index is given, only that pose is shown.\nIf --csv is given, all poses are saved to a CSV.\nIf --res is given, only residue names from H-bonds are shown.\nIf --csv_hbonds is given, hydrogen bond residues per pose are saved to a CSV.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dockinspect.launch_shell", "modulename": "dockinspect", "qualname": "launch_shell", "kind": "variable", "doc": "<p>Initializes a docking analysis session and launches the interactive shell.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand_smiles</strong>:  SMILES string of the ligand.</li>\n<li><strong>pdb_code</strong>:  Protein structure PDB code.</li>\n<li><strong>vina_file</strong>:  Output file from AutoDock Vina.</li>\n<li><strong>predictions_file</strong>:  Pocket prediction file (optional).</li>\n<li><strong>residues_file</strong>:  Residue annotation file (optional).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "default_value": "&lt;Command launch-shell&gt;"}, {"fullname": "dockinspect.cli", "modulename": "dockinspect", "qualname": "cli", "kind": "variable", "doc": "<p>Docking analysis tool</p>\n", "default_value": "&lt;Group cli&gt;"}, {"fullname": "dockinspect.ligand_info", "modulename": "dockinspect", "qualname": "ligand_info", "kind": "variable", "doc": "<p>Shows physicochemical properties of a ligand from a SMILES string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand_smiles</strong>:  SMILES string representing the ligand.</li>\n<li><strong>csv</strong>:  Optional path to save the output as a CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "default_value": "&lt;Command ligand_info&gt;"}, {"fullname": "dockinspect.pocket_info", "modulename": "dockinspect", "qualname": "pocket_info", "kind": "variable", "doc": "<p>Shows SASA, GRAVY, and charge for predicted pockets in a protein.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>structure_file</strong>:  Path to the structure file (.pdb or .pdbqt).</li>\n<li><strong>predictions_file</strong>:  Path to the pocket predictions file (from p2rank).</li>\n<li><strong>residues_file</strong>:  Path to the pocket-to-residues mapping file.</li>\n<li><strong>pocket_id</strong>:  Optional ID of a specific pocket to display.</li>\n<li><strong>csv</strong>:  Optional path to save pocket info as a CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "default_value": "&lt;Command pocket_info&gt;"}, {"fullname": "dockinspect.poses_info", "modulename": "dockinspect", "qualname": "poses_info", "kind": "variable", "doc": "<p>Shows ligand\u2013pocket interaction summary per docking pose.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand_smiles</strong>:  SMILES string of the ligand.</li>\n<li><strong>pdb_code</strong>:  PDB code of the protein.</li>\n<li><strong>vina_file</strong>:  Path to the AutoDock Vina output file (.pdbqt).</li>\n<li><strong>structure_file</strong>:  Path to the protein structure file (.pdb or .pdbqt).</li>\n<li><strong>predictions_file</strong>:  Path to the pocket predictions file.</li>\n<li><strong>residues_file</strong>:  Path to the pocket-to-residues mapping file.</li>\n<li><strong>pose_index</strong>:  Optional index of a specific pose to display (1-based).</li>\n<li><strong>csv</strong>:  Optional path to save poses info as a CSV file.</li>\n<li><strong>res</strong>:  If provided only residue names from H-bonds are shown.</li>\n<li><strong>csv_hbonds</strong>:  Optional path to save hydrogen bond residues per pose are saved to a CSV.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "default_value": "&lt;Command poses_info&gt;"}, {"fullname": "export_info_to_csv", "modulename": "export_info_to_csv", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "export_info_to_csv.export_ligand_info", "modulename": "export_info_to_csv", "qualname": "export_ligand_info", "kind": "function", "doc": "<p>Exports ligand physicochemical properties to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand</strong>:  Ligand object with computed properties.</li>\n<li><strong>csv_path</strong>:  Path to the output CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ligand</span><span class=\"p\">:</span> <span class=\"n\">ligand</span><span class=\"o\">.</span><span class=\"n\">Ligand</span>, </span><span class=\"param\"><span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "export_info_to_csv.export_pocket_info", "modulename": "export_info_to_csv", "qualname": "export_pocket_info", "kind": "function", "doc": "<p>Exports pocket metrics (SASA, GRAVY, charge) to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pockets</strong>:  Pockets object with computed pocket metrics.</li>\n<li><strong>csv_path</strong>:  Path to the output CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pockets</span><span class=\"p\">:</span> <span class=\"n\">pockets</span><span class=\"o\">.</span><span class=\"n\">Pockets</span>, </span><span class=\"param\"><span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "export_info_to_csv.export_poses_info", "modulename": "export_info_to_csv", "qualname": "export_poses_info", "kind": "function", "doc": "<p>Exports docking pose\u2013pocket interaction summaries to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>poses</strong>:  Poses object containing pose-level metrics and pocket assignments.</li>\n<li><strong>csv_path</strong>:  Path to the output CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">poses</span><span class=\"p\">:</span> <span class=\"n\">poses</span><span class=\"o\">.</span><span class=\"n\">Poses</span>, </span><span class=\"param\"><span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "export_info_to_csv.export_hbond_residues", "modulename": "export_info_to_csv", "qualname": "export_hbond_residues", "kind": "function", "doc": "<p>Exports hydrogen bond residue names per pose to a CSV file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>poses</strong>:  Poses object containing model_hbonds (a list of residue names per pose).</li>\n<li><strong>csv_path</strong>:  Path to the output CSV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">poses</span><span class=\"p\">:</span> <span class=\"n\">poses</span><span class=\"o\">.</span><span class=\"n\">Poses</span>, </span><span class=\"param\"><span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ligand", "modulename": "ligand", "kind": "module", "doc": "<p>Calculates physicochemical properties of a ligand from its SMILES string using RDKit to compute logP (hydrophobicity), SASA, TPSA, molecular volume, and net formal charge.</p>\n\n<p>Classes:\n    Ligand: Represents a small molecule with computed properties.</p>\n"}, {"fullname": "ligand.Ligand", "modulename": "ligand", "qualname": "Ligand", "kind": "class", "doc": "<p>Represents a ligand and computes key molecular properties from a SMILES string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>smiles</strong>:  A SMILES string representing the ligand structure.</li>\n</ul>\n\n<p>Attributes:\n    smiles (str): The input SMILES string.\n    logp (float): Calculated octanol-water partition coefficient (hydrophobicity).\n    sasa (float): Solvent accessible surface area (\u00c5\u00b2).\n    tpsa (float): Topological polar surface area (\u00c5\u00b2).\n    volume (float): Molecular volume estimated using a lattice-based method (\u00c5\u00b3).\n    charge (int): Net formal charge of the molecule.</p>\n"}, {"fullname": "ligand.Ligand.__init__", "modulename": "ligand", "qualname": "Ligand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">smiles</span></span>)</span>"}, {"fullname": "ligand.Ligand.smiles", "modulename": "ligand", "qualname": "Ligand.smiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ligand.Ligand.logp", "modulename": "ligand", "qualname": "Ligand.logp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ligand.Ligand.sasa", "modulename": "ligand", "qualname": "Ligand.sasa", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ligand.Ligand.tpsa", "modulename": "ligand", "qualname": "Ligand.tpsa", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ligand.Ligand.volume", "modulename": "ligand", "qualname": "Ligand.volume", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ligand.Ligand.charge", "modulename": "ligand", "qualname": "Ligand.charge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pockets", "modulename": "pockets", "kind": "module", "doc": "<p>Analyzes predicted protein pockets to compute SASA, GRAVY, and net charge.</p>\n\n<p>This script uses FreeSASA and residue-level annotations to compute:</p>\n\n<ul>\n<li>Solvent Accessible Surface Area (SASA) for each pocket</li>\n<li>GRAVY (hydropathy index) of residues in each pocket</li>\n<li>Net formal charge of each pocket based on amino acid composition</li>\n</ul>\n\n<p>Classes:\n    Pockets: Encapsulates methods and data for analyzing protein pocket properties.</p>\n"}, {"fullname": "pockets.Pockets", "modulename": "pockets", "qualname": "Pockets", "kind": "class", "doc": "<p>Represents a collection of predicted protein pockets and calculates their physicochemical properties.</p>\n\n<p>Attributes:\n    pocket_charges (dict): Net formal charge of each pocket.\n    pocket_gravys (dict): GRAVY index (hydropathy) of each pocket.\n    pocket_sasas (dict): Solvent-accessible surface area of each pocket.</p>\n"}, {"fullname": "pockets.Pockets.__init__", "modulename": "pockets", "qualname": "Pockets.__init__", "kind": "function", "doc": "<p>Initializes the Pockets object by computing pocket charge, GRAVY, and SASA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>structure_filepath</strong>:  Path to the structure file (e.g., .pdbqt).</li>\n<li><strong>predictions_filepath</strong>:  Path to the predicted pocket CSV file.</li>\n<li><strong>residues_filepath</strong>:  Path to the residues CSV file (contains residue identities).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure_filepath</span>, </span><span class=\"param\"><span class=\"n\">predictions_filepath</span>, </span><span class=\"param\"><span class=\"n\">residues_filepath</span></span>)</span>"}, {"fullname": "pockets.Pockets.get_pocket_charge", "modulename": "pockets", "qualname": "Pockets.get_pocket_charge", "kind": "function", "doc": "<p>Calculates the charge of each protein pocket based on the predicted amino acids.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pocket_locations_dict</strong>:  Dictionary where keys are pocket IDs and values are lists of chain and residue locations.</li>\n<li><strong>location_aa_dict</strong>:  Dictionary mapping chain-residue locations to their corresponding amino acid abbreviations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary where keys are pocket IDs and values are the charge of the respective pockets.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pocket_locations_dict</span>, </span><span class=\"param\"><span class=\"n\">location_aa_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pockets.Pockets.get_pocket_gravy", "modulename": "pockets", "qualname": "Pockets.get_pocket_gravy", "kind": "function", "doc": "<p>Calculates the GRAVY (grand average of hydropathy) of each protein pocket based on the predicted amino acids.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pocket_locations_dict</strong>:  Dictionary where keys are pocket IDs and values are lists of chain and residue locations.</li>\n<li><strong>location_aa_dict</strong>:  Dictionary mapping chain-residue locations to their corresponding amino acid abbreviations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary where keys are pocket IDs and values are the average hydropathy of the respective pockets.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pocket_locations_dict</span>, </span><span class=\"param\"><span class=\"n\">location_aa_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pockets.Pockets.get_pocket_sasas", "modulename": "pockets", "qualname": "Pockets.get_pocket_sasas", "kind": "function", "doc": "<p>Calculates solvent accessible surface area (SASA) for each pocket using FreeSASA.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions_filepath</strong>:  Path to the .csv file containing pocket residue predictions (e.g. from P2Rank).</li>\n<li><strong>structure_filepath</strong>:  Path to the structure file in PDB/PDBQT/CIF format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary where keys are pocket IDs and values are their SASA values (\u00c5\u00b2).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions_filepath</span>, </span><span class=\"param\"><span class=\"n\">structure_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pockets.Pockets.pocket_charges", "modulename": "pockets", "qualname": "Pockets.pocket_charges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pockets.Pockets.pocket_gravys", "modulename": "pockets", "qualname": "Pockets.pocket_gravys", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pockets.Pockets.pocket_sasas", "modulename": "pockets", "qualname": "Pockets.pocket_sasas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pockets.Pockets.format_pocket_row", "modulename": "pockets", "qualname": "Pockets.format_pocket_row", "kind": "function", "doc": "<p>Formats a single row of pocket data for printing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pid</strong>:  Pocket ID.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Formatted string with SASA, GRAVY, and charge values for the given pocket.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "poses", "modulename": "poses", "kind": "module", "doc": "<p>Analyzes docking poses to associate ligands with predicted protein pockets and evaluate interactions.</p>\n\n<p>This script uses PyMOL to:</p>\n\n<ul>\n<li>Compute hydrogen bonds for each pose.</li>\n<li>Match each ligand pose to its closest predicted pocket.</li>\n<li>Combine ligand and pocket descriptors (SASA, GRAVY, charge) for pose-level analysis.</li>\n</ul>\n\n<p>Classes:\n    Poses: Evaluates pose-pocket interactions and formats pose-specific properties.</p>\n"}, {"fullname": "poses.Poses", "modulename": "poses", "qualname": "Poses", "kind": "class", "doc": "<p>Represents a collection of ligand poses and analyzes their interaction with protein pockets.</p>\n\n<p>Attributes:\n    ligand (Ligand): Ligand object containing molecular descriptors.\n    pockets (Pockets): Pockets object with pocket-level SASA, GRAVY, and charge info.\n    model_hbonds (list): List of hydrogen bond pairs per model.\n    model_pockets (list): List of closest pockets assigned to each model.\n    number_of_models (int): Total number of docking poses (models).</p>\n"}, {"fullname": "poses.Poses.__init__", "modulename": "poses", "qualname": "Poses.__init__", "kind": "function", "doc": "<p>Initializes a Poses object by associating each ligand pose with a pocket and computing HBonds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand</strong>:  Ligand object.</li>\n<li><strong>pockets</strong>:  Pockets object.</li>\n<li><strong>structure_filepath</strong>:  Path to structure file used in docking.</li>\n<li><strong>out_vina_filepath</strong>:  Path to Vina docking output file.</li>\n<li><strong>predictions_filepath</strong>:  Path to CSV with pocket predictions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ligand</span>, </span><span class=\"param\"><span class=\"n\">pockets</span>, </span><span class=\"param\"><span class=\"n\">pdb_code</span>, </span><span class=\"param\"><span class=\"n\">out_vina_filepath</span>, </span><span class=\"param\"><span class=\"n\">predictions_filepath</span></span>)</span>"}, {"fullname": "poses.Poses.get_hydrogen_bonds", "modulename": "poses", "qualname": "Poses.get_hydrogen_bonds", "kind": "function", "doc": "<p>Calculates the number of hydrogen bonds between protein and ligand for each pose,\nfiltering out intra-ligand bonds.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdb_code</strong>:  PDB code for the structure to fetch from RCSB.</li>\n<li><strong>out_vina_filepath</strong>:  Path to the Vina docking output file (PDBQT).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of hydrogen bond pairs (tuples of atom indices) for each pose.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdb_code</span>, </span><span class=\"param\"><span class=\"n\">out_vina_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "poses.Poses.get_models_avg_coordinates", "modulename": "poses", "qualname": "Poses.get_models_avg_coordinates", "kind": "function", "doc": "<p>Computes the average coordinates of ligand atoms for each docking pose.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_vina_filepath</strong>:  Path to a Vina output PDBQT file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of average (x, y, z) coordinates for each pose.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_vina_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "poses.Poses.get_model_pocket_helper", "modulename": "poses", "qualname": "Poses.get_model_pocket_helper", "kind": "function", "doc": "<p>Assigns the closest pocket to each ligand pose based on spatial proximity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pocket_data_df</strong>:  DataFrame from pocket prediction CSV.</li>\n<li><strong>models_avg_coordinates</strong>:  List of ligand center coordinates for each pose.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of closest pocket names for each model.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pocket_data_df</span>, </span><span class=\"param\"><span class=\"n\">models_avg_coordinates</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "poses.Poses.get_model_pocket", "modulename": "poses", "qualname": "Poses.get_model_pocket", "kind": "function", "doc": "<p>Wrapper for assigning closest pockets to each pose based on coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions_filepath</strong>:  Path to CSV with pocket centers.</li>\n<li><strong>out_vina_filepath</strong>:  Path to docking output (PDBQT).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of closest pockets per pose.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions_filepath</span>, </span><span class=\"param\"><span class=\"n\">out_vina_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "poses.Poses.ligand", "modulename": "poses", "qualname": "Poses.ligand", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "poses.Poses.pockets", "modulename": "poses", "qualname": "Poses.pockets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "poses.Poses.model_hbonds", "modulename": "poses", "qualname": "Poses.model_hbonds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "poses.Poses.model_pockets", "modulename": "poses", "qualname": "Poses.model_pockets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "poses.Poses.number_of_models", "modulename": "poses", "qualname": "Poses.number_of_models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "poses.Poses.format_pose_row", "modulename": "poses", "qualname": "Poses.format_pose_row", "kind": "function", "doc": "<p>Formats a single row of pose-pair analysis data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong>:  Index of the docking pose.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Formatted string of pose properties and interactions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "visualization", "modulename": "visualization", "kind": "module", "doc": "<p>Launches PyMOL with a visualization script for binding poses from AutoDock Vina.</p>\n\n<p>This script loads a protein structure and ligand pose from AutoDock Vina output,\nvisualizes selected modes (e.g. surfaces, polar regions, charge distribution, hydrogen bonds),\nand optionally highlights predicted binding pockets from tools like P2Rank.</p>\n\n<p>Functions:\n    visualize: Main visualization interface for PyMOL.\n    __color_regions: Helper function to color specific residue types.</p>\n\n<p>Requires PyMOL, structure and Vina output files, and optionally a pocket selection string.</p>\n"}, {"fullname": "visualization.visualize", "modulename": "visualization", "qualname": "visualize", "kind": "function", "doc": "<p>Launches PyMOL with a visualization script for binding poses from AutoDock Vina.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pdb_code</strong>:  PDB code for the protein structure to fetch remotely.</li>\n<li><strong>vina_file</strong>:  Path to the out_vina file from AutoDock Vina.</li>\n<li><strong>pose_num</strong>:  Pose number to visualize (1-based index, default is 1).</li>\n<li><strong>pocket_selection</strong>:  PyMOL atom selection string for highlighting a pocket (from p2rank predictions).</li>\n<li><strong>mode</strong>:  Visualization mode ('surface', 'polar', 'charge', 'hbonds', default is 'hbonds').</li>\n<li><strong>hbonds</strong>:  Whether to compute and show hydrogen bonds between ligand and protein (default False).</li>\n<li><strong>cutoff</strong>:  Distance cutoff (in \u00c5) for defining binding pocket if no pocket selection is given.</li>\n<li><strong>not_pocket_surface_transparency</strong>:  Transparency level for non-pocket regions (default 0).</li>\n<li><strong>pocket_surface_transparency</strong>:  Transparency level for pocket surface (default 0).</li>\n<li><strong>color_mode</strong>:  Coloring scheme for residues ('broad', 'detailed', or empty for none).</li>\n<li><strong>show_pocket_surface</strong>:  Whether to show surface representation of pocket residues.</li>\n<li><strong>show_ligand_surface</strong>:  Whether to show surface representation of ligand.</li>\n<li><strong>show_not_pocket_surface</strong>:  Whether to show surface for non-pocket protein regions.</li>\n<li><strong>show_pocket_sticks</strong>:  Whether to show pocket residues as sticks.</li>\n<li><strong>show_ligand_sticks</strong>:  Whether to show ligand as sticks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pdb_code</span>,</span><span class=\"param\">\t<span class=\"n\">vina_file</span>,</span><span class=\"param\">\t<span class=\"n\">pose_num</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">pocket_selection</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hbonds</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"mf\">3.6</span>,</span><span class=\"param\">\t<span class=\"n\">not_pocket_surface_transparency</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">pocket_surface_transparency</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">color_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_pocket_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_ligand_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_not_pocket_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_pocket_sticks</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_ligand_sticks</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pymol_tools", "modulename": "pymol_tools", "kind": "module", "doc": "<p>Provides utility functions for parsing pocket prediction data from CSV files \ninto PyMOL-friendly selection strings.</p>\n\n<p>Functions:\n    get_pocket_residues_dict: Converts residue IDs into selection strings by pocket.\n    get_pocket_atomids_dict: Converts atom IDs into selection strings by pocket.</p>\n"}, {"fullname": "pymol_tools.get_pocket_residues_dict", "modulename": "pymol_tools", "qualname": "get_pocket_residues_dict", "kind": "function", "doc": "<p>Generates a dictionary where keys are pocket names and values are residues joined in one string \nformatted for the pymol selection command.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pocket_data_df</strong>:  A dataframe generated from a CSV file containing PDB predictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where keys are pocket names and values are residue selection strings for PyMOL.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pocket_data_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pymol_tools.get_pocket_atomids_dict", "modulename": "pymol_tools", "qualname": "get_pocket_atomids_dict", "kind": "function", "doc": "<p>Generates a dictionary where keys are pocket names and values are atom ID selections\nformatted for the PyMOL selection command.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pocket_data_df</strong>:  A dataframe generated from a CSV file containing PDB predictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where keys are pocket names and values are atom ID selection strings for PyMOL.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pocket_data_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_parser", "modulename": "my_parser", "kind": "module", "doc": "<p>Parses prediction and residue data from CSV files for use in pocket and interaction analysis.</p>\n\n<p>Functions:\n    get_df: Reads a CSV file and returns a cleaned pandas DataFrame.\n    parse_predictions: Converts a prediction CSV to a pocket-to-residues dictionary.\n    parse_residues: Converts a residue CSV to a residue-location-to-amino-acid dictionary.</p>\n"}, {"fullname": "my_parser.get_df", "modulename": "my_parser", "qualname": "get_df", "kind": "function", "doc": "<p>Parses a CSV file containing PDB predictions to generate an according dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions_filepath</strong>:  Path to the CSV file containing PDB predictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dataframe from the given CSV file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_parser.parse_predictions", "modulename": "my_parser", "qualname": "parse_predictions", "kind": "function", "doc": "<p>Parses a CSV file containing PDB predictions to generate a dictionary mapping pocket IDs \nto lists of residue IDs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions_filepath</strong>:  Path to the CSV file containing PDB predictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where keys are pocket IDs and values are lists of residue IDs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_parser.parse_residues", "modulename": "my_parser", "qualname": "parse_residues", "kind": "function", "doc": "<p>Parses a CSV file containing PDB residue information and generates a dictionary mapping  each chain and residue ID \nto the corresponding amino acid three-letter abbreviation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>residues_filepath</strong>:  Path to the CSV file containing PDB residue data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where keys are residue IDs and values are the three-letter amino acid abbreviations at those locations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">residues_filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();